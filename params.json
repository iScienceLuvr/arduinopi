{"name":"Arduinopi","tagline":"Arduino Pi repository","body":"![Arduino Pi logo](https://static.hackaday.io/images/5331751402362645333.png)\r\n# Arduino Pi\r\n=========\r\n\r\nThe Arduino Pi is a single board computer based on Arduino. The Arduino Pi has a six button keyboard known as GKOS, which is an chorded keyboard, and has an LED matrix based display. Right now, the LED matrix is a 5x5 LED matrix that scrolls. It has 4 digital pins for development using the Arduino platform. The scripting language is called Bitlash. Bitlash was used because it was easier to implement in the Arduino sketch than other programming languages such as Python or even Forth.\r\n\r\n## GKOS Keypad\r\nWith the 6 GKOS keys, directly connected to Arduino I/O pins, it is possible to type any text and enter most functions found on the PC keyboard (Alt, Ctrl, Tab...).\r\n\r\n### How to type\r\nGKOS Alphabet\r\n\r\n![](http://koti.mbnet.fi/gkos/gkoscom/g-buttons_letters_us2_p.jpg)\r\n\r\nThe GKOS Alphabet.\r\n\r\nLetters G, K, O, S and W require two keys, and they also function as modifiers (shifts) changing the characters on other keys. For example, to press A, press the top left button. But to press H, press the top two buttons on the right ( the G key) and the top left button.\r\n\r\nPressing all 6 keys down toggles between numbers and letters. You get backspace by pressing the 3 keys on the left, and space by pressing the 3 keys on the right. The full character set can be found here.\r\n\r\n###GKOS Hardware\r\n\r\n![](http://koti.mbnet.fi/gkos/gkoscom/arduino/arduino_pads_01.png)\r\n\r\nGkos keypad wiring\r\n\r\nThe hardware is simply six buttons directly connected to Arduino's pins. In the Arduino Pi project, the analog pins are used.\r\n\r\n## LED Matrix\r\nThe LED matrix is controlled using row-column scanning. \r\n\r\nLED displays are often packaged as matrixes of LEDs arranged in rows of common anodes and columns of common cathodes, or the reverse. Here's a typical example of an 8x8 matrix schematic:\r\n\r\n![](http://arduino.cc/en/uploads/Tutorial/LEDmatrix_schem.png)\r\n\r\nThe 5x5 LED matrix is used as a scrolling text display to show the results of the commands.\r\nFor more information about LED matrices and how they are controlled in the Arduino Pi, refer to the Deployment section.\r\n\r\nI used the code from the below link and leveraged it for a 5x5 matrix:\r\n\r\n[http://blog.duklabs.com/?p=133](http://blog.duklabs.com/?p=133)\r\n\r\n## Bitlash\r\nBitlash is an open source interpreted language shell and embedded programming environment for Arduino. The Bitlash shell runs entirely on the Arduino and supports many of the familiar Arduino functions. Bitlash interprets commands you type on the serial port or send from your favorite PC-side programming environment. I have integrated Bitlash with the GKOS keypad so instead of using a serial port to enter commands, the GKOS keypad is used to write Bitlash commands.\r\n\r\nBitlash website:\r\n\r\n[https://www.bitlash.net](https://www.bitlash.net)\r\n\r\n##Free pins\r\n\r\nDue to the way the Arduino Pi was laid out, there are 4 digital pins that are free to use when used with an \r\nArduino Uno. Since the Arduino Pi is in its early stages of development (as of June 4, 2014), when Used with different Arduino boards, the number of free pins vary. For example, an Arduino Pro Mini would not only have 4 free digital pins but also 2 free analog pins.\r\n\r\n### Using free pins\r\n\r\nCurrently, the only way to use those free pins are by using Bitlash commands. \r\n\r\n#Repository\r\n=========\r\n\r\nThe repository includes the code, schematic, and PCB files. To view the files, go to github.com/iScienceLuvr/arduinopi or press the \"View on Github\" button or download the github repository by pressing the \"TAR\" or \"ZIP\" download buttons. The entire project is under the Apache License. \r\n\r\n#Deployment\r\n=========\r\n\r\nTo use the code posted in the repository, connect six buttons to the analog pins 0-5 and to the ground. Use a row-column scan LED Matrix (the code supports a 5x5 matrix) and connect them to digital pins 0-9. Refer to the schematic in the github repository\r\n\r\n##LED matrix controlling\r\n\r\nTo control the 5x5 matrix, connect both its rows and columns to the Arduino. The columns are connected to the LEDs cathodes (see schematic), so a column needs to be high for any of the LEDs in that column to turn on. The rows are connected to the LEDs anodes, so the row needs to be low for an individual LED to turn on. If the row and the column are both high or both low, no voltage flows through the LED and it doesn’t turn on.\r\n\r\nTo control an individual LED, set its column high and its row low. To control multiple LEDs in a row, you set the rows high, then take the column high, then set the rows low or high as appropriate; a low row will turn the corresponding LED on, and a high row will turn it off.\r\n\r\n\r\n##Hardware schematics and pictures\r\n\r\n###Schematic:\r\n![Schematic]\r\n(https://us-mg205.mail.yahoo.com/ya/download?mid=2_0_0_1_116366691_ANW%2FimIAABJQU%2FTTKQAAACvyuic&pid=2&fid=Inbox&inline=1)\r\n\r\n###​Breadboard:\r\n![Breadboard]\r\n(https://us-mg205.mail.yahoo.com/ya/download?mid=2_0_0_1_116370362_ANW%2FimIAABLAU%2FTV5gAAAN%2B1%2BfY&pid=2&fid=Inbox&inline=1)\r\n\r\n![Breadboard]\r\n(https://us-mg205.mail.yahoo.com/ya/download?mid=2_0_0_1_116370362_ANW%2FimIAABLAU%2FTV5gAAAN%2B1%2BfY&pid=4&fid=Inbox&inline=1)\r\n\r\n###LED Matrix:\r\n![LED Matrix]\r\n(https://us-mg205.mail.yahoo.com/ya/download?mid=2_0_0_1_116371299_AJG%2FimIAABQWU%2FTW2wAAAIcZKAs&pid=2&fid=Inbox&inline=1)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}